//Highly divisible triangular number
//The sequence of triangle numbers is generated by adding the natural numbers.So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
//The first ten terms would be :
//
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//Let us list the factors of the first seven triangle numbers :
//
//1 : 1
//3 : 1, 3
//6 : 1, 2, 3, 6
//10 : 1, 2, 5, 10
//15 : 1, 3, 5, 15
//21 : 1, 3, 7, 21
//28 : 1, 2, 4, 7, 14, 28
//We can see that 28 is the first triangle number to have over five divisors.
//
//What is the value of the first triangle number to have over five hundred divisors ?
#include "stdafx.h"
#include "Problem12.h"
#include <iostream>
#include <vector>

Problem12::Problem12()
{
}


Problem12::~Problem12()
{
}

unsigned long long Problem12::Solve() // Takes ? minutes to solve
{
    int i = 1;
    bool done = false;
    std::vector<int> triangleNumbers;
    triangleNumbers.push_back(1);
    while (!done)
    {
        int nextTriangleNumber = triangleNumbers[i-1] + (i+1);
        triangleNumbers.push_back(nextTriangleNumber);

        if (Problem12::MoreThan500divisors(nextTriangleNumber))
        {
            done = true;
        }
        i++;
    }
    return triangleNumbers[triangleNumbers.size() - 1]; // this number has more than 500 factors
}


bool Problem12::MoreThan500divisors(int number)
{
    int countOfDivisors = 0;
    int factor = 1;
    while (countOfDivisors < 501)
    {
        if (number % factor++ == 0)
        {
            countOfDivisors++;
        }
        if (factor > number)
        {
            return false;
        }
    }
    return true;
}